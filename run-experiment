#!/bin/bash

# define constants
all_libraries=('careamics' 'n2v' 'ppn2v' 'test_library')
all_methods=('n2v' 'test_method')
all_datasets=('bsd68' 'test_dataset')

###############################
# Inspect arguments to script #
###############################
usage() { 
   # echo the command usage
   echo "$(basename "$0") [-h] -l library -m method -d dataset -- runs the 
         experiment for the given algorithm and dataset using the
         specified library.

         where:
            -h  show this help text
            -l  library to use (one of ${all_libraries[@]})
            -m  method to run (one of ${all_methods[@]})
            -d  dataset to use (one of ${all_datasets[@]})" 1>&2; 
   exit 1; 
}

validate_library() {
   # exit if library is not recognised
   if [[ " "${all_libraries[@]}" " != *" "$1" "* ]] ;then 
      echo "Wrong library argument: $1. Valid names are: ${all_libraries[@]/%/}"
      echo ""
      usage
      exit 1
   fi
}

validate_method() {
   # exit if method is not recognised
   if [[ " "${all_methods[@]}" " != *" "$1" "* ]] ;then 
      echo "Wrong method argument: $1. Valid names are: ${all_methods[@]/%/}"
      echo ""
      usage
      exit 1
   fi
}

validate_dataset() {
   # exit if dataset is not recognised
   if [[ " "${all_datasets[@]}" " != *" "$1" "* ]] ;then 
      echo "Wrong dataset argument: $1. Valid names are: ${all_datasets[@]/%/}"
      echo ""
      usage
      exit 1
   fi
}

# Inspect arguments and echo the usage if necessary
while getopts ':h:l:m:d:r' option; do
   case "$option" in
      h) 
         usage;;
      l) 
         library=$OPTARG
         validate_library "$library"
         ;;
      m) 
         method=$OPTARG
         validate_method "$method"
         ;;
      d) 
         dataset=$OPTARG
         validate_dataset "$dataset"
         ;;
      r)
         debug=true
         ;;
      \?) 
         echo "Unknown option: -$OPTARG" >&2; 
         exit 1;;
      :) 
         echo "Missing option argument for -$OPTARG" >&2; 
         exit 1;;
      *) 
         usage
         ;;
  esac
done

# check that all mandatory options are there
shift $((OPTIND-1))

if [ -z "${library}" ] || [ -z "${method}" ] || [ -z "${dataset}" ]; then
   echo "Missing argument." 
   usage
fi

# show debug info
if [ "${debug}" = true ]; then
   echo "library: $library"
   echo "method: $method"
   echo "dataset: $dataset"
fi

###############################
######## Create paths  ########
###############################
# path to environment
# TODO: should use array of libraries here
case "$library" in
   "careamics")
      name="careamics"
      env_path="environments/careamics.yml"
      ;;

   "n2v")
      name="tf-n2v"
      env_path="environments/tf_n2v.yml"
      ;;

   "ppn2v")
      name="torch-ppn2v"
      env_path="environments/torch_ppn2v.yml"
      ;;

   "test_library")
      name="test-env"
      env_path="environments/test-env.yml"
      ;;
esac

# show debug info
if [ "${debug}" = true ]; then
   echo "Name: $name"
   echo "Env Path: $env_path"
fi

# path to python script
script_path="$method/$dataset/$name"
script_name="$name-$dataset.py"
script_full_path="$script_path/$script_name" 
if [ "${debug}" = true ]; then
   echo "Script path: $script_full_path"
fi

# check if python script exists
if ! [[ -f "$script_full_path" ]]; then 
    echo "$script_full_path does not exist."
    exit 1
fi

###############################
############# HPC #############
###############################
# path to sbatch script
path_to_sbatch="$PWD/scripts/run-job.sbatch"
if [ "${debug}" = true ]; then
   echo "Sbatch script: $path_to_sbatch"
fi

# run sbatch
timestamp=$(date +%s)
log="$name""_$timestamp.log"
output_stats="$name""_$timestamp""_stats"
if [ "${debug}" = true ]; then
   echo "Log script: $log"
   echo "Output stats script: $output_stats"
fi

sbatch "$path_to_sbatch" --job-name="$name" --output="$log" "$name" "$script_full_path" "$output_stats"
